@page "/scenario/select"
@using HiddenLove.Shared.Models.ScenarioSelection
@inject HttpWrapper Http
@inject JsHelper Js
@inject NavigationManager NavManager


<div class="choose-clean">
    <div class="choose-form">

        <div class="choose-image">
            <img src="img/logo.svg" class="choose-illustration" />
        </div>

        <h2>Choix d'un scénario personnalisé</h2>

        <div class="choose-date">
            <span>Sélectionnez une date :</span>
            <Datebox @bind-BindingValue="EventDate" />
        </div>

        @if (IsPageLoaded)
        {
            int i = 0;
            <div class="choose-group">
                @foreach (ScenarioSelectionData scenario in Scenarios)
                {
                    <div class="choose-list">
                        <input type="radio" id="@i" @onclick="@(() => SelectScenarioTemplate(scenario.Id))" />
                        <label for="@i">@scenario.Title</label>
                    </div>
                    i ++;
                }
            </div>
        }
        else
        {
            <p>En cours de chargement...</p>
        }

        <div class="btn-validation">
            <button class="btn btn-primary" @onclick="SelectScenario">Valider le choix du scénario</button>
        </div>
        <div class="error">
            <p>@Message</p>
        </div>
    </div>
</div>

@code {
    private bool IsPageLoaded { get; set; } = false;

    private List<ScenarioSelectionData> Scenarios = new List<ScenarioSelectionData>();

    private DateTime? EventDate { get; set; } = null;
    private int? ScenarioTemplateId { get; set; } = null;
    private string Message { get; set; } = "";
    protected override async Task OnInitializedAsync()
    {
        await Http.Authenticate(Js, NavManager);
        Scenarios = await Http.GetResultAsync<List<ScenarioSelectionData>>("ScenarioSelection/AvailableScenarios");
        IsPageLoaded = true;
    }

    private void SelectScenarioTemplate(int id)
    {
        ScenarioTemplateId = id;
        Js.Log(id);
    }

    private async void SelectScenario()
    {
        if (ScenarioTemplateId == null)
        {
            Message = "Aucun scénario n'a été sélectionné.";
            return;
        }

        if (EventDate == null)
        {
            Message = "Une date pour l'exécution du scénario doit être planifiée.";
            return;
        }

        var req = new SelectedScenarioData
        {
            IdScenario = ScenarioTemplateId.GetValueOrDefault(0),
            EventDate = EventDate.GetValueOrDefault(DateTime.Now)
        };

        Js.Log(req);

        int idCreatedScenario = await Http.PostResultAsync<SelectedScenarioData, int>("ScenarioSelection/BookScenario", req);

        NavManager.NavigateTo("/scenario/view/" + idCreatedScenario);
    }


}
