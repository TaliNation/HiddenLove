@page "/scenario/select"
@using HiddenLove.Shared.Models.ScenarioSelection
@inject HttpWrapper Http
@inject JsHelper Js
@inject NavigationManager NavManager
@layout NavbarLayout


<div class="choose-clean">
    <div class="choose-form">

        <div class="choose-image">
            <img src="img/logo.svg" class="choose-illustration" />
        </div>

        <h2>Choisissez le scénario qui vous correspond !</h2>
        <div>
            <Textbox Placeholder="Recherche..." @bind-BindingValue="Search" />
        </div>

        <span>Sélectionnez un scénario :</span>

        @if (IsPageLoaded)
        {
            int i = 0;
            <div class="card-organisation">
                @foreach (ScenarioSelectionData scenario in FilteredScenarios)
                {
                    <div class="card @HighlightScenarioCard(scenario.Id)"
                @onclick="@(() => SelectScenarioTemplate(scenario.Id))">
                        <img class="card-img-top" src="@scenario.Image" />
                        <div class="card-body">
                            <h5 class="card-title">@scenario.Title</h5>
                            <p class="card-description">@scenario.Description</p>
                        </div>
                        <div class="btn-validation">
                            <button hidden="@ToggleButton(scenario.Id)" class="btn btn-primary" data-toggle="modal"
                        data-target="#date-modal">Choisir</button>
                        </div>
                    </div>
                    i++;
                }
            </div>
        }
        else
        {
            <p>En cours de chargement...</p>
        }

        <!-- Modal -->
        <div class="modal fade" id="date-modal" tabindex="-1" aria-labelledby="date-modal" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="choose-date">
                            <span>Sélectionnez une date :</span>
                            <Datebox @bind-BindingValue="EventDate" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" hidden="@IsConfirmedButtonHidden" data-toggle="modal" data-target="#scenario-modal"
                            class="btn btn-secondary" data-dismiss="modal">Confirmer</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="scenario-modal" tabindex="-1" aria-labelledby="scenario-modal" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="scenario-modal">Êtes-vous sûr de vouloir choisir ce scénario ?</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-footer">
                        <button type="button" @onclick="@(() => ConfirmScenario())" class="btn btn-secondary"
                            data-dismiss="modal">Oui</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Non</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {

    private bool IsConfirmedButtonHidden => !EventDate.HasValue;

    private bool HideButton { get; set; } = true;

    private bool ToggleButton(int id)
    {
        return ScenarioTemplateId != id;
    }

    private bool IsPageLoaded { get; set; } = false;

    private List<ScenarioSelectionData> Scenarios = new List<ScenarioSelectionData>();

    private List<ScenarioSelectionData> FilteredScenarios => Scenarios.Where(x => x.Title.Contains(Search,
    StringComparison.InvariantCultureIgnoreCase)).ToList();

    private string Search { get; set; } = "";

    private DateTime? EventDate { get; set; } = null;

    private int? ScenarioTemplateId { get; set; } = null;

    private string HighlightScenarioCard(int id)
    {
        return ScenarioTemplateId == id ? "selected-card" : "";
    }

    protected override async Task OnInitializedAsync()
    {
        await Http.Authenticate(Js, NavManager);
        Scenarios = await Http.GetResultAsync<List<ScenarioSelectionData>>("ScenarioSelection/AvailableScenarios");
        IsPageLoaded = true;
    }

    private void SelectScenarioTemplate(int id)
    {
        ScenarioTemplateId = id;
        Js.Log(id);
    }

    private async void ConfirmScenario()
    {
        if (ScenarioTemplateId == null)
        {
            return;
        }

        if (EventDate == null)
        {
            return;
        }

        var req = new SelectedScenarioData
        {
            IdScenario = ScenarioTemplateId.GetValueOrDefault(0),
            EventDate = EventDate.GetValueOrDefault(DateTime.Now)
        };

        Js.Log(req);

        int idCreatedScenario = await Http.PostResultAsync<SelectedScenarioData, int>("ScenarioSelection/BookScenario", req);

        NavManager.NavigateTo("/scenario/view/" + idCreatedScenario);
    }
}
