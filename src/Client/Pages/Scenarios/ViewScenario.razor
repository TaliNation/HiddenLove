@page "/scenario/view/{IdScenario:int}"
@inject HttpWrapper Http
@inject NavigationManager NavManager
@layout NavbarLayout

<div class="view-clean">
    <div class="view-form">

        @if (ContentStatus == ContentStatus.Ok)
        {
            <div class="view-titles">
                <h1>@ScenarioDetails.Title</h1>
            </div>
            <div class="view-date">
                <h3>@ScenarioDetails.EventDate.ToString("dddd dd MMMM yyyy")</h3>
            </div>

            <div class="view-description">
                <p>@ScenarioDetails.Description</p>
            </div>

            <div class="view-step">
                <h2>Étapes</h2>
            </div>

            <table class="table">
                <thead class="thead-light">
                    <tr>
                        <th scope="col">Étapes</th>
                        <th scope="col">Description</th>
                        <th scope="col">Horaires</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (StepDetailsData step in ScenarioDetails.Steps)
                    {
                        <tr class="testas">
                            <td>@step.Title</td>
                            <td>@step.Description</td>
                            <td>@step.StartDate.ToString("HH:mm") <i class="fa fa-long-arrow-alt-right"></i>
                                @step.EndDate.ToString("HH:mm")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else if (ContentStatus == ContentStatus.Loading)
        {
            <p>Chargement...</p>
        }
        else
        {
            <p>Aucun scénario trouvé. <a href="/">Retour à la page d'accueil.</a></p>
        }

        <div class="row">
            <div class="col-12">
                <button class="btn btn-primary" data-toggle="modal" data-target="#delete-modal">Annuler le scénario
                    ?</button>
            </div>
        </div>

        <!-- Modal -->
        <div class="modal fade" id="delete-modal" tabindex="-1" aria-labelledby="delete-modal" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="delete-modal">Êtes-vous sûr de vouloir annuler ce scénario ?</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-footer">
                        <button type="button" @onclick="@(() => DeleteScenarioAsync())" class="btn btn-secondary"
                            data-dismiss="modal">Oui</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Non</button>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

@code {
    [Parameter]
    public int IdScenario { get; set; }

    private ScenarioDetailsData ScenarioDetails { get; set; }
    private ContentStatus ContentStatus { get; set; } = ContentStatus.Loading;

    protected override async Task OnInitializedAsync()
    {
        await Http.Authenticate();

        ScenarioDetails = await Http.GetResultAsync<ScenarioDetailsData>("ScenarioView/Details/" + IdScenario);
        HttpResponseMessage res = await Http.GetAsync("ScenarioView/Details/" + IdScenario);
        if (!res.IsSuccessStatusCode)
        {
            ContentStatus = ContentStatus.Error;
            return;
        }

        ScenarioDetails = await res.Content.ReadAsAsync<ScenarioDetailsData>();
        ContentStatus = ContentStatus.Ok;
    }

    private async void DeleteScenarioAsync()
    {
        await Http.Client.DeleteAsync($"ScenarioView/Scenario/{IdScenario}");
        NavManager.NavigateTo("/home");
    }
}