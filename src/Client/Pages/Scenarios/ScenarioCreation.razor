@page "/scenario/create"
@using HiddenLove.Shared.Models.ScenarioCreation
@inject HttpWrapper Http
@inject JsHelper Js
@inject NavigationManager NavManager
@layout NavbarLayout

<div class="creation-clean">
    <div class="creation-form">

        <div class="creation-image">
            <img src="img/logo.svg" class="creation-illustration" />
        </div>

        <h2>Création d'un scénario personnalisé</h2>

        <div class="row">
            <div class="col-3">
                <Textbox Placeholder="Titre du scénario" @bind-BindingValue="Title" />
            </div>
            <div class="col-6">
                <Textarea Placeholder="Description du scénario" @bind-BindingValue="Description" />
            </div>
            <div class="col-3">
                <Textbox Placeholder="Lien de l'image" @bind-BindingValue="Image" />
            </div>
        </div>
        @foreach (var step in Steps.Select((e, i) => new { Step = e, Index = i }))
        {
            <div class="row">
                <div class="col-3">
                    <SelectList Items="AvailableSteps" @bind-BindingValue="Steps[step.Index].StepIdAsString" />
                </div>
                <div class="col-3">
                    <Timebox @bind-BindingValue="Steps[step.Index].StartTime" />
                </div>
                <div class="col-3">
                    <Timebox @bind-BindingValue="Steps[step.Index].EndTime" />
                </div>
                <div class="change-creation" @onclick="@(x => RemoveStep(step.Index))">
                    <i class="fas fa-minus-circle"></i>
                    <span>Supprimer une étape</span>
                </div>
            </div>
        }
        <div class="row">
            <div class="change-creation" @onclick="AddStep">
                <i class="fas fa-plus-circle" id="add"></i>
                <span> Ajouter une étape</span>
            </div>
        </div>
        <div class="btn-validation">
            <button class="btn btn-primary" @onclick="SubmitScenario" data-toggle="modal" data-target="#ScenarioModal"
               >Valider la création du scénario</button>
        </div>

        <!-- Modal -->
        <div class="modal fade" id="ScenarioModal" tabindex="-1" data-backdrop="static" data-keyboard="false" aria-labelledby="ScenarioModal" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="ScenarioModalLabel">@Message</h5>
                        <button hidden="@HiddenHeader" type="button" class="btn btn-secondary" data-dismiss="modal">Ok</button>
                    </div>
                    <div hidden="@HiddenFooter" class="modal-footer">
                        <button type="button"  @onclick="ConfirmScenario" class="btn btn-secondary" data-dismiss="modal">Compris</button>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

@code {
    private List<KeyValuePair<string, string>> AvailableSteps = new List<KeyValuePair<string, string>>();
    private List<ScenarioCreationStep> Steps = new List<ScenarioCreationStep>();

    private string Title { get; set; } = "";
    private string Description { get; set; } = "";
    private string Image { get; set; } = "";

    private string Message { get; set; } = "";

    private bool HiddenFooter { get; set; } = true;

    private bool HiddenHeader { get; set; } = !true;

    protected override async Task OnInitializedAsync()
    {
        await Http.Authenticate(Js, NavManager);
        AvailableSteps = await Http.GetResultAsync<List<KeyValuePair<string, string>>>("ScenarioCreation/Steps");
        Console.WriteLine("App is ready to use");
    }

    protected void AddStep()
    {
        var newElement = new ScenarioCreationStep
        {
            StepIdAsString = AvailableSteps.First().Key,
            StartTime = null,
            EndTime = null
        };

        if (Steps.Count() > 0)
            newElement.StartTime = Steps[Steps.Count() - 1].EndTime;

        Steps.Add(newElement);
    }

    protected void RemoveStep(int index)
    {
        Steps.RemoveAt(index);
    }

    protected void SubmitScenario()
    {
        if (Title == "" || Title == null)
        {
            Message = "Un scénario nécessite un titre.";
            return;
        }

        if (!Image.StartsWith("https://") && !Image.StartsWith("http://"))
        {
            Message = "Le lien de l'image est invalide. Assurez-vous qu'il commence bien par \"http\" ou \"https\".";
            return;
        }

        if (Steps.Count() < 2)
        {
            Message = "Un scénario doit au moins contenir 2 étapes.";
            return;
        }

        foreach (ScenarioCreationStep step in Steps)
        {
            if (step.StartTime == null || step.EndTime == null)
            {
                Message = "Toutes les étapes doivent avoir une heure de début et une heure de fin.";
                return;
            }
        }
        HiddenHeader = !HiddenHeader;
        HiddenFooter = !HiddenFooter;
        Message = "La création du scénario est terminée.";

    }

    protected async void ConfirmScenario() 
    {
         var request = new HiddenLove.Shared.Models.ScenarioCreation.ScenarioCreation
        {
            Title = Title,
            Description = Description,
            Image = Image,
            Steps = Steps
        };

        var res = await
        Http.PostAsync<HiddenLove.Shared.Models.ScenarioCreation.ScenarioCreation>("ScenarioCreation/NewScenario", request);
        if (!res.IsSuccessStatusCode)
        {
            HttpError error = await res.Content.ReadAsAsync<HttpError>();
            Js.LogError(error);
            return;
        }

        NavManager.NavigateTo("/home");
    }
}