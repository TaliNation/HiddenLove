@page "/login"
@using HiddenLove.Shared.Models.Authentication
@inject HttpHelper Http
@inject CookieHelper Cookie

<h1>Login</h1>

<div class="row">
    <div class="col-4">
        <input class="form-control" type="text" name="EmailAddress" id="#emailAddressInput" placeholder="Email Address" @bind="EmailAddressBinding" />
    </div>
    <div class="col-4">
        <input class="form-control" type="text" name="Password" id="#passwordInput" placeholder="Password" @bind="PasswordBinding" />
    </div>
    <div class="col-4">
        <button class="btn btn-primary full-width" @onclick="LogUser">Submit</button>
    </div>
</div>
@* <div class="row">
    <button class="btn btn-primary full-width" @onclick="GetAllUsers">Get all users</button>
</div> *@
<div class="row">
    <p>@CookieTokenValue</p>
</div>


@code {
    private AuthenticationResponse LoginResponse;

    private string EmailAddressBinding;
    private string PasswordBinding;

    private string CookieTokenValue;


    //private User CurrentUser

    protected override void OnInitialized()
    {
        LoginResponse = new AuthenticationResponse();
    }

    private async void LogUser()
    {
        var request = new AuthenticationRequest 
        { 
            EmailAddress = EmailAddressBinding,
            Password = PasswordBinding
        };

        LoginResponse = await Http.PostAsync<AuthenticationRequest, AuthenticationResponse>("Users/authenticate", request);

        Http.AddAuthorizationHeader(LoginResponse.Token);
        
        Cookie.WriteCookie("token", LoginResponse.Token, 60);
        CookieTokenValue = await Cookie.ReadCookie("token");
        StateHasChanged();
    }

    /*
    private async void GetAllUsers()
    {
        return await Http.Get<AuthenticationRequest, AuthenticationResponse>("Users/authenticate");
    }
    */
}