@page "/register"
@inject HttpClient Http
@inject JsHelper Js
@inject NavigationManager NavManager

<h1>Register</h1>

<div class="row">
    <div class="col-4">
        <Textbox Placeholder="Email Address" OnChange="SetEmailAddress" />
    </div>
    <div class="col-4">
        <Textbox Placeholder="Password" IsPassword OnChange="SetPassword" />
    </div>
    <div class="col-4">
        <Textbox Placeholder="Password" IsPassword OnChange="SetConfirmedPassword" />
    </div>
</div>
<div class="row">
    <div class="col-4">
        <Textbox Placeholder="Username" OnChange="SetUsername" />
    </div>
    <div class="col-2">
        <Checkbox Label="J'ai lu et j'accepte les conditions générales d'utilisation." OnChange="SetTermsOfServiceAccepted" />
    </div>
    <div class="col-2">
        <Checkbox Label="J'ai lu et j'accepte la politique de vie privée." OnChange="SetPrivacyPoliciesAccepted" />
    </div>
    <div class="col-2">
        <button class="btn btn-primary full-width" @onclick="RegisterUser">Submit</button>
    </div>
</div>
<div class="row">
    <p>@Message</p>
</div>

@code {
    private AuthenticationResponse LoginToken;

    private string EmailAddress { get; set; } = "";
    private string Password { get; set; } = "";
    private string ConfirmedPassword { get; set; } = "";
    private string Username { get; set; } = "";
    private bool TermsOfServiceAccepted { get; set; } = false;
    private bool PrivacyPoliciesAccepted { get; set; } = false;

    private string Message { get; set; } = "";

    public void SetEmailAddress(string s) => EmailAddress = s;
    public void SetPassword(string s) => Password = s;
    public void SetConfirmedPassword(string s) => ConfirmedPassword = s;
    public void SetUsername(string s) => Username = s;
    public void SetTermsOfServiceAccepted(bool b) => TermsOfServiceAccepted = b;
    public void SetPrivacyPoliciesAccepted(bool b) => PrivacyPoliciesAccepted = b;

    private async void RegisterUser()
    {
        if(!TermsOfServiceAccepted || !PrivacyPoliciesAccepted)
        {
            Message = "You must accept the terms of services and the privacy policy to register.";
            return;
        }

        if(Password != ConfirmedPassword)
        {
            Message = "Password and confirmation are not identical;";
            return;
        }

        var registerRequest = new RegisterRequest
        {
            EmailAddress = EmailAddress,
            UserName = Username,
            Password = Password
        };

        var res = await Http.PostAsJsonAsync<RegisterRequest>("Users/register", registerRequest);
        if(!res.IsSuccessStatusCode)
        {
            HttpError error = await res.Content.ReadAsAsync<HttpError>();
            Js.LogError(error);
            return;
        }
        LoginToken = await res.Content.ReadAsAsync<AuthenticationResponse>();

        Http.AddJwtAuthentication(LoginToken.Token);

        NavManager.NavigateTo("/");
    }
}