@page "/login"
@inject HttpWrapper Http
@inject JsHelper Js
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage

<div class="login-clean">
    <div class="login-form">
        <div class="illustration">
            <img src="img/logo.png" />
        </div>
        <Textbox Placeholder="Email" OnChange="SetEmailAddress" />
        <Textbox Placeholder="Password" IsPassword OnChange="SetPassword" />
        <Checkbox Label="Rester connectÃ© pendant 7 jours" OnChange="SetStayConnected" />
        <div class="form-group">
            <button class="btn btn-primary btn-block" @onclick="LogUser">Submit</button>
        </div>
        <p>@Message</p>
    </div>
</div>


@code {
    private string EmailAddress { get; set; } = "";
    private string Password { get; set; } = "";
    private bool StayConnected { get; set; } = false;

    private string CookieTokenValue { get; set; } = "";
    private string Message { get; set; } = "";

    public void SetEmailAddress(string s) => EmailAddress = s;
    public void SetPassword(string s) => Password = s;
    public void SetStayConnected(bool b) => StayConnected = b;

    private async void LogUser()
    {
        var request = new AuthenticationRequest 
        { 
            EmailAddress = EmailAddress,
            Password = Password
        };
        
        HttpResponseMessage res = await Http.PostAsync<AuthenticationRequest>("Users/authenticate", request);
        if(!res.IsSuccessStatusCode)
        {
            HttpError error = await res.Content.ReadAsAsync<HttpError>();
            Js.LogError(error);
            return;
        }
        AuthenticationResponse loginToken = await res.Content.ReadAsAsync<AuthenticationResponse>();
        
        Js.WriteCookie("token", loginToken.Token, StayConnected ? 60 * 60 * 24 * 7 : 60 * 60);

        NavManager.NavigateTo("/test");
    }
}