@page "/login"
@inject HttpHelper Http
@inject CookieHelper Cookie
@inject NavigationManager NavManager

<h1>Login</h1>

<div class="row">
    <div class="col-3">
        <Textbox Placeholder="Email Address" OnChange="SetEmailAddress" />
    </div>
    <div class="col-3">
        <Textbox Placeholder="Password" OnChange="SetPassword" />

        @* <input class="form-control" type="text" id="passwordInput" placeholder="Password" @bind="Password" /> *@
    </div>
    <div class="col-3">
        <input class="form-control" type="checkbox" @bind="StayConnectedBinding" />
    </div>
    <div class="col-3">
        <button class="btn btn-primary full-width" @onclick="LogUser">Submit</button>
    </div>
</div>
<div class="row">
    <p>@Message</p>
</div>

@code {
    private AuthenticationResponse LoginToken;

    private string EmailAddress { get; set; } = "";
    private string Password { get; set; } = "";
    private bool StayConnectedBinding { get; set; } = false;

    private string CookieTokenValue { get; set; } = "";
    private string Message { get; set; } = "";

    public void SetEmailAddress(string s) => EmailAddress = s;
    public void SetPassword(string s) => EmailAddress = s;

    private async void LogUser()
    {
        var request = new AuthenticationRequest 
        { 
            EmailAddress = EmailAddress,
            Password = Password
        };

        try 
        {
            LoginToken = await Http.PostAsync<AuthenticationRequest, AuthenticationResponse>("Users/authenticate", request);
        }
        catch(HttpRequestException)
        {
            Message = "Incorrect username or password.";
            StateHasChanged();
            return;
        }

        Http.AddAuthorizationHeader(LoginToken.Token);
        
        if(StayConnectedBinding)
        {
            Cookie.WriteCookie("token", LoginToken.Token, 60 * 60 * 24 * 7);
        }

        NavManager.NavigateTo("/");
    }
}