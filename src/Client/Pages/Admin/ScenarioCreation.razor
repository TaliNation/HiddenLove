@page "/admin/scenario-creation"
@using HiddenLove.Shared.Models.ScenarioCreation
@inject HttpWrapper Http
@inject JsHelper Js
@inject NavigationManager NavManager

<div class="container">
    <div class="row">
        <div class="col-3">
            <Textbox Placeholder="Titre" @bind-BindingValue="Title" />
        </div>
        <div class="col-9">
            <Textarea Placeholder="Description" @bind-BindingValue="Description" />
        </div>
    </div>
    @foreach (var step in Steps.Select((e, i) => new { Step = e, Index = i }))
    {
        <div class="row">
            <div class="col-3">
                <SelectList Items="AvailableSteps" @bind-BindingValue="Steps[step.Index].StepIdAsString" />
            </div>
            <div class="col-3">
                <Timebox @bind-BindingValue="Steps[step.Index].StartTime" />
            </div>
            <div class="col-3">
                <Timebox @bind-BindingValue="Steps[step.Index].EndTime" />
            </div>
            <div class="col-3">
                <i class="fas fa-minus-circle" @onclick="@(x => RemoveStep(step.Index))"></i>
            </div>
        </div>
    }
    <div class="row">
        <div class="col-10"></div>
        <div class="col-2">
            <i class="fas fa-plus-circle" @onclick="AddStep"></i>
        </div>
    </div>
    <div class="row">
        <button class="btn btn-primary" @onclick="SubmitScenario">J'ai Terminé !</button>
    </div>
    <div class="row">
        <p>@Message</p>
    </div>
</div>

@code {
    private List<KeyValuePair<string, string>> AvailableSteps = new List<KeyValuePair<string, string>>();
    private List<ScenarioCreationStep> Steps = new List<ScenarioCreationStep>();

    private string Title { get; set; } = "";
    private string Description { get; set; } = "";

    private string Message { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await Http.Authenticate(Js, NavManager);
        AvailableSteps = await Http.GetResultAsync<List<KeyValuePair<string, string>>>("ScenarioCreation/Steps");
        Console.WriteLine("App is ready to use");
    }

    protected void AddStep()
    {
        var newElement = new ScenarioCreationStep {
            StepIdAsString = AvailableSteps.First().Key,
            StartTime = null,
            EndTime = null
        };

        if(Steps.Count() > 0) 
            newElement.StartTime = Steps[Steps.Count()-1].EndTime;

        Steps.Add(newElement);
    }
    
    protected void RemoveStep(int index)
    {
        Steps.RemoveAt(index);
    }

    protected async void SubmitScenario()
    {
        if(Title == "" || Title == null)
        {
            Message = "Le titre ne peut pas être vide.";
            return;
        }

        if(Steps.Count() < 2)
        {
            Message = "Un scénario doit au moins contenir 2 étapes.";
            return;
        }

        foreach(ScenarioCreationStep step in Steps)
        {
            if(step.StartTime == null || step.EndTime == null)
            {
                Message = "Toutes les étapes doivent avoir une heure de début et de fin.";
                return;
            }
        }
        
        var request = new HiddenLove.Shared.Models.ScenarioCreation.ScenarioCreation
        {
            Title = Title,
            Description = Description,
            Steps = Steps
        };

        var res = await Http.PostAsync<HiddenLove.Shared.Models.ScenarioCreation.ScenarioCreation>("ScenarioCreation/NewScenario", request);
        if(!res.IsSuccessStatusCode)
        {
            HttpError error = await res.Content.ReadAsAsync<HttpError>();
            Js.LogError(error);
            return;
        }

        NavManager.NavigateTo("/");
    }
}