@page "/register"
@inject HttpWrapper Http
@inject JsHelper Js
@inject NavigationManager NavManager

<div class="register-clean">
    <div class="register-form">
        <div class="illustration">
            <img src="img/logo.svg" class="illustration" />
        </div>
        <Textbox Placeholder="Nom d'utilisateur" @bind-BindingValue="Username" />

        <Textbox Placeholder="Adresse Email" @bind-BindingValue="EmailAddress" />

        <Textbox Placeholder="Mot de passe" IsPassword @bind-BindingValue="Password" />

        <Textbox Placeholder="Confirmation du mot de passe" IsPassword @bind-BindingValue="ConfirmedPassword" />

        <div class="PasswordWarning">
            <p>@Message</p>
        </div>
        <div class="read-me">
            <div class="terms">
                <Checkbox Label="J'ai lu et j'accepte la politique de vie privée." @bind-BindingValue="PrivacyPolicies"
                    id="Pp-Checkbox" />
            </div>
            <div class="icon">
                <a href="/about/pp" target="_blank" rel="noopener noreferrer"> <i class="fa fa-question-circle"></i></a>
            </div>
        </div>
        <div class="read-me">
            <div class="terms">
                <Checkbox Label="J'ai lu et j'accepte les conditions générales d'utilisation."
                    @bind-BindingValue="TermsOfService" id="Tos-Checkbox" />
            </div>
            <div class="icon">
                <a href="/about/tos" target="_blank" rel="noopener noreferrer"> <i
                        class="fa fa-question-circle"></i></a>
            </div>
        </div>
        <div class="registerlogin-link">
            <p>Déjà inscrit ? <a href="/login">Connectez-vous</a></p>
        </div>
        <button class="btn btn-primary full-width" disabled="@RegisterButtonDisabled"
            @onclick="RegisterUser">Valider</button>
    </div>
</div>

@code {
    private string EmailAddress
    {
        get => _emailAddress;

        set
        {
            _emailAddress = value;
            EnableButton();
        }
    }
    private string Password
    {
        get => _password;

        set
        {
            _password = value;
            EnableButton();
        }
    }
    private string ConfirmedPassword
    {
        get => _confirmedPaswword;

        set
        {
            _confirmedPaswword = value;
            EnableButton();
        }
    }
    private string Username
    {
        get => _username;

        set
        {
            _username = value;
            EnableButton();
        }
    }
    private string Message { get; set; } = "";
    private bool RegisterButtonDisabled { get; set; } = true;
    private bool _termsOfService = false;
    private bool _privacyPolicies = false;
    private string _emailAddress = "";
    private string _password = "";
    private string _confirmedPaswword = "";
    private string _username = "";
    private bool TermsOfService
    {
        get
        {
            return _termsOfService;
        }
        // A chaque fois que la veleur change, on vérifie s'il faut activer le bouton ou non
        set
        {
            _termsOfService = value;
            EnableButton();
        }
    }
    private bool PrivacyPolicies
    {
        get
        {
            return _privacyPolicies;
        }
        // A chaque fois que la veleur change, on vérifie s'il faut activer le bouton ou non
        set
        {
            _privacyPolicies = value;
            EnableButton();
        }
    }
    private bool IsFormNotFilled => string.IsNullOrEmpty(EmailAddress) || string.IsNullOrEmpty(Username) ||
        string.IsNullOrEmpty(Password) || string.IsNullOrEmpty(ConfirmedPassword) || !TermsOfService || !PrivacyPolicies;

    private void EnableButton()
    {
        Console.WriteLine(TermsOfService.ToString() + " " + PrivacyPolicies.ToString());
        RegisterButtonDisabled = IsFormNotFilled;
    }

    private async void RegisterUser()
    {
        var registerRequest = new RegisterRequest
        {
            EmailAddress = EmailAddress,
            UserName = Username,
            Password = Password
        };

        if (Password != ConfirmedPassword)
        {
            Message = "Les mots de passes ne sont pas identiques.";
            Password = "";
            ConfirmedPassword = "";
            return;
        }

        var res = await Http.PostAsync<RegisterRequest>("Users/register", registerRequest);
        if (!res.IsSuccessStatusCode)
        {
            HttpError error = await res.Content.ReadAsAsync<HttpError>();
            Js.LogError(error);
            return;
        }

        AuthenticationResponse loginToken = await res.Content.ReadAsAsync<AuthenticationResponse>();

        Js.WriteCookie("token", loginToken.Token, 60 * 60);

        NavManager.NavigateTo("/test");
    }
}