@page "/scenario/select"
@using HiddenLove.Shared.Models.ScenarioSelection
@inject HttpWrapper Http
@inject JsHelper Js
@inject NavigationManager NavManager


<div class="choose-clean">
    <div class="choose-form">

        <h1>Selectionnez un scénario !</h1>

        @if (_isPageLoaded)
        {
            <div class="row">
                @foreach (ScenarioSelectionData scenario in _scenarios)
                {
                    <div class="col-md-3 col-sm-6 padding-bottom">
                        <p @onclick="@(() => SelectScenarioTemplate(scenario.Id))">@scenario.Title</p>
                    </div>
                }
            </div>
        }
        else
        {
            <p>En cours de chargement...</p>
        }

        <div class="row">
            <Datebox @bind-BindingValue="_eventDate" />
            <Button OnClick="SelectScenario" Text="EE" />
        </div>
        <div class="row">
            <p>@_message</p>
        </div>
    </div>
</div>

@code {
    private bool _isPageLoaded { get; set; } = false;

    private List<ScenarioSelectionData> _scenarios = new List<ScenarioSelectionData>();

    private DateTime? _eventDate { get; set; } = null;
    private int? _scenarioTemplateId { get; set; } = null;
    private string _message { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await Http.Authenticate(Js, NavManager);
        _scenarios = await Http.GetResultAsync<List<ScenarioSelectionData>>("ScenarioSelection/AvailableScenarios");
        _isPageLoaded = true;
    }

    private void SelectScenarioTemplate(int id)
    {
        _scenarioTemplateId = id;
        Js.Log(id);
    }

    private async void SelectScenario()
    {
        if (_scenarioTemplateId == null)
        {
            _message = "Aucun scénario n'a été sélectionné.";
            return;
        }

        if (_eventDate == null)
        {
            _message = "Une date pour l'execution du scénario doit être planifiée.";
            return;
        }

        var req = new SelectedScenarioData
        {
            IdScenario = _scenarioTemplateId.GetValueOrDefault(0),
            EventDate = _eventDate.GetValueOrDefault(DateTime.Now)
        };

        Js.Log(req);

        int idCreatedScenario = await Http.PostResultAsync<SelectedScenarioData, int>("ScenarioSelection/BookScenario", req);

        NavManager.NavigateTo("/scenario/view/" + idCreatedScenario);
    }


}
